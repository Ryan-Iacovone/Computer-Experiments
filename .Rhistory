guides(fill = guide_legend(reverse = TRUE)) +
theme_bw()
fps_bar
# Plot horizontal bar chart for all selected games
fps_bar <- summary_fps_long %>% ggplot(aes(x =  reorder(fps, fps_type[['AVG FPS']]) , y = Application, fill = fps_type)) +
geom_text(aes(label = fps), hjust = -0.1, position = position_dodge(width = 1)) +
geom_bar(stat = "identity", position = "dodge") +
labs(
x = "FPS",
y = "Game",
fill = "",
title = "Gaming Benchmarks July 2023",
subtitle = "See spec sheet for specific computer configuration") +
scale_fill_manual(values = c("AVG FPS" = "dodgerblue2", "1% Lows" = "firebrick3", "0.1% Lows" = "darkorange1")) +
#original
#scale_fill_manual(values = c("Avg FPS" = "darkblue", "1% Low FPS" = "maroon", "0.1% Low FPS" = "yellow")) +
scale_x_continuous(breaks = seq(0, 500, by = 100),
limits = c(0, 500)) +
#Reversing the legend does work in this case, but like in the KDL study I got around this by manually defining the factor levels for each variable
guides(fill = guide_legend(reverse = TRUE)) +
theme_bw()
fps_bar
# Plot horizontal bar chart for all selected games
fps_bar <- summary_fps_long %>% ggplot(aes(x = fps , y = Application, fill = fps_type)) +
geom_text(aes(label = fps), hjust = -0.1, position = position_dodge(width = 1)) +
geom_bar(stat = "identity", position = "dodge") +
labs(
x = "FPS",
y = "Game",
fill = "",
title = "Gaming Benchmarks July 2023",
subtitle = "See spec sheet for specific computer configuration") +
scale_fill_manual(values = c("AVG FPS" = "dodgerblue2", "1% Lows" = "firebrick3", "0.1% Lows" = "darkorange1")) +
#original
#scale_fill_manual(values = c("Avg FPS" = "darkblue", "1% Low FPS" = "maroon", "0.1% Low FPS" = "yellow")) +
scale_x_continuous(breaks = seq(0, 500, by = 100),
limits = c(0, 500)) +
#Reversing the legend does work in this case, but like in the KDL study I got around this by manually defining the factor levels for each variable
guides(fill = guide_legend(reverse = TRUE)) +
theme_bw()
fps_bar
View(fps_bar)
View(summary_fps_long)
fps_bar <- summary_fps_long %>%
ggplot(aes(x = reorder(fps, ifelse(fps_type == "AVG FPS", -fps, fps)), y = Application, fill = fps_type)) +
geom_text(aes(label = fps), hjust = -0.1, position = position_dodge(width = 1)) +
geom_bar(stat = "identity", position = "dodge") +
labs(
x = "FPS",
y = "Game",
fill = "",
title = "Gaming Benchmarks July 2023",
subtitle = "See spec sheet for specific computer configuration"
) +
scale_fill_manual(values = c("AVG FPS" = "dodgerblue2", "1% Lows" = "firebrick3", "0.1% Lows" = "darkorange1")) +
scale_x_continuous(breaks = seq(0, 500, by = 100), limits = c(0, 500)) +
guides(fill = guide_legend(reverse = TRUE)) +
theme_bw()
summary_fps_long %>%
ggplot(aes(x = reorder(fps, ifelse(fps_type == "AVG FPS", -fps, fps)), y = Application, fill = fps_type)) +
geom_text(aes(label = fps), hjust = -0.1, position = position_dodge(width = 1)) +
geom_bar(stat = "identity", position = "dodge") +
labs(
x = "FPS",
y = "Game",
fill = "",
title = "Gaming Benchmarks July 2023",
subtitle = "See spec sheet for specific computer configuration"
) +
scale_fill_manual(values = c("AVG FPS" = "dodgerblue2", "1% Lows" = "firebrick3", "0.1% Lows" = "darkorange1")) +
scale_x_continuous(breaks = seq(0, 500, by = 100), limits = c(0, 500)) +
guides(fill = guide_legend(reverse = TRUE)) +
theme_bw()
fps_bar
#Data Wrangling
summary_fps <- read_excel(excel_file_frameview, sheet = "Summary")
#contains columns I might find important later but don't rn like `Min FPS`, `Max FPS`
summary_fps_o <- summary_fps %>% select(Application, `Avg FPS`, `1% Low FPS`, `0.1% Low FPS`, `Min FPS`, `Max FPS`)
summary_fps <- summary_fps %>% select(Application, `Avg FPS`, `1% Low FPS`, `0.1% Low FPS`)
#code to strip the .exe from the application variable so that it just displays the game name
pattern <- "\\.exe$"
summary_fps$Application <- str_replace(summary_fps$Application, pattern, "")
#Code to calculate averages of "Avg FPS", "1% Low FPS", and "0.1% Low FPS" across game observations (the goal is 3 observations per game then take the averages of that)
summary_fps <- summary_fps %>% group_by(Application) %>%
summarise('AVG FPS' = mean(`Avg FPS`),
'1% Lows' = mean(`1% Low FPS`),
'0.1% Lows' = mean(`0.1% Low FPS`))
#Pivoting the data to a longer format so that each of my FPS measures has their own column
summary_fps_long <- pivot_longer(summary_fps, cols = c("AVG FPS", "1% Lows", "0.1% Lows"), names_to = "fps_type", values_to = "fps")
#Changing the names of the games in the application column to better fit
summary_fps_long <- summary_fps_long %>%
mutate(Application = recode(Application,
"FortniteClient-Win64-Shipping" = "Fortnite",
"starwarsbattlefrontii" = "SW Battlefront II",
"r5apex" = "Apex",
"cod" = "COD: Warzone",
"destiny2" = "Destiny 2"))
#Original
#hehe <- pivot_longer(summary_fps, cols = c("Avg FPS", "1% Low FPS", "0.1% Low FPS"), names_to = "fps_type", values_to = "fps")
#changing the format of the newly created FPS column so that it only displays out to 1 decimal point string to display all numbers
summary_fps_long$fps <- round(summary_fps_long$fps, digits = 1)
############# WE CAN NOW REORDER THE horizontal bar chart BY AVF FPS #############
#Reordering the dataset to display by descending order in the box plot
#group_ordered <- with(summary_fps_long, reorder(fps, desc('AVG FPS'), mean))
#boxplot_circ_day$branch <- factor(boxplot_circ_day$branch, levels = levels(group_ordered))
# Plot horizontal bar chart for all selected games
fps_bar <- summary_fps_long %>% ggplot(aes(x = fps , y = Application, fill = fps_type)) +
geom_text(aes(label = fps), hjust = -0.1, position = position_dodge(width = 1)) +
geom_bar(stat = "identity", position = "dodge") +
labs(
x = "FPS",
y = "Game",
fill = "",
title = "Gaming Benchmarks July 2023",
subtitle = "See spec sheet for specific computer configuration") +
scale_fill_manual(values = c("AVG FPS" = "dodgerblue2", "1% Lows" = "firebrick3", "0.1% Lows" = "darkorange1")) +
#original
#scale_fill_manual(values = c("Avg FPS" = "darkblue", "1% Low FPS" = "maroon", "0.1% Low FPS" = "yellow")) +
scale_x_continuous(breaks = seq(0, 500, by = 100),
limits = c(0, 500)) +
#Reversing the legend does work in this case, but like in the KDL study I got around this by manually defining the factor levels for each variable
guides(fill = guide_legend(reverse = TRUE)) +
theme_bw()
fps_bar
fps_bar <- summary_fps_long %>%
ggplot(aes(x = reorder(fps, ifelse(fps_type == "AVG FPS", -fps, fps)), y = Application, fill = fps_type)) +
geom_text(aes(label = fps), hjust = -0.1, position = position_dodge(width = 1)) +
geom_bar(stat = "identity", position = "dodge") +
labs(
x = "FPS",
y = "Game",
fill = "",
title = "Gaming Benchmarks July 2023",
subtitle = "See spec sheet for specific computer configuration"
) +
scale_fill_manual(values = c("AVG FPS" = "dodgerblue2", "1% Lows" = "firebrick3", "0.1% Lows" = "darkorange1")) +
scale_x_continuous(breaks = seq(0, 500, by = 100), limits = c(0, 500)) +
guides(fill = guide_legend(reverse = TRUE)) +
theme_bw()
summary_fps_long %>%
ggplot(aes(x = reorder(fps, ifelse(fps_type == "AVG FPS", -fps, fps)), y = Application, fill = fps_type)) +
geom_text(aes(label = fps), hjust = -0.1, position = position_dodge(width = 1)) +
geom_bar(stat = "identity", position = "dodge") +
labs(
x = "FPS",
y = "Game",
fill = "",
title = "Gaming Benchmarks July 2023",
subtitle = "See spec sheet for specific computer configuration"
) +
scale_fill_manual(values = c("AVG FPS" = "dodgerblue2", "1% Lows" = "firebrick3", "0.1% Lows" = "darkorange1")) +
scale_x_continuous(breaks = seq(0, 500, by = 100), limits = c(0, 500)) +
guides(fill = guide_legend(reverse = TRUE)) +
theme_bw()
class(summary_fps_long)
class(summary_fps_long$fps_type)
hummses <- as.factor(summary_fps_long$fps_type)
class(hummses)
summary_fps_long$fps_type <- as.factor(summary_fps_long$fps_type)
# Plot horizontal bar chart for all selected games
fps_bar <- summary_fps_long %>% ggplot(aes(x = fps , y = Application, fill = fps_type)) +
geom_text(aes(label = fps), hjust = -0.1, position = position_dodge(width = 1)) +
geom_bar(stat = "identity", position = "dodge") +
labs(
x = "FPS",
y = "Game",
fill = "",
title = "Gaming Benchmarks July 2023",
subtitle = "See spec sheet for specific computer configuration") +
scale_fill_manual(values = c("AVG FPS" = "dodgerblue2", "1% Lows" = "firebrick3", "0.1% Lows" = "darkorange1")) +
#original
#scale_fill_manual(values = c("Avg FPS" = "darkblue", "1% Low FPS" = "maroon", "0.1% Low FPS" = "yellow")) +
scale_x_continuous(breaks = seq(0, 500, by = 100),
limits = c(0, 500)) +
#Reversing the legend does work in this case, but like in the KDL study I got around this by manually defining the factor levels for each variable
guides(fill = guide_legend(reverse = TRUE)) +
theme_bw()
fps_bar
#Data Wrangling
summary_fps <- read_excel(excel_file_frameview, sheet = "Summary")
#contains columns I might find important later but don't rn like `Min FPS`, `Max FPS`
summary_fps_o <- summary_fps %>% select(Application, `Avg FPS`, `1% Low FPS`, `0.1% Low FPS`, `Min FPS`, `Max FPS`)
summary_fps <- summary_fps %>% select(Application, `Avg FPS`, `1% Low FPS`, `0.1% Low FPS`)
#code to strip the .exe from the application variable so that it just displays the game name
pattern <- "\\.exe$"
summary_fps$Application <- str_replace(summary_fps$Application, pattern, "")
#Code to calculate averages of "Avg FPS", "1% Low FPS", and "0.1% Low FPS" across game observations (the goal is 3 observations per game then take the averages of that)
summary_fps <- summary_fps %>% group_by(Application) %>%
summarise('AVG FPS' = mean(`Avg FPS`),
'1% Lows' = mean(`1% Low FPS`),
'0.1% Lows' = mean(`0.1% Low FPS`))
#Pivoting the data to a longer format so that each of my FPS measures has their own column
summary_fps_long <- pivot_longer(summary_fps, cols = c("AVG FPS", "1% Lows", "0.1% Lows"), names_to = "fps_type", values_to = "fps")
#Changing the names of the games in the application column to better fit
summary_fps_long <- summary_fps_long %>%
mutate(Application = recode(Application,
"FortniteClient-Win64-Shipping" = "Fortnite",
"starwarsbattlefrontii" = "SW Battlefront II",
"r5apex" = "Apex",
"cod" = "COD: Warzone",
"destiny2" = "Destiny 2"))
#Original
#hehe <- pivot_longer(summary_fps, cols = c("Avg FPS", "1% Low FPS", "0.1% Low FPS"), names_to = "fps_type", values_to = "fps")
#changing the format of the newly created FPS column so that it only displays out to 1 decimal point string to display all numbers
summary_fps_long$fps <- round(summary_fps_long$fps, digits = 1)
############# WE CAN NOW REORDER THE horizontal bar chart BY AVF FPS #############
#Reordering the dataset to display by descending order in the box plot
#group_ordered <- with(summary_fps_long, reorder(fps, desc('AVG FPS'), mean))
#boxplot_circ_day$branch <- factor(boxplot_circ_day$branch, levels = levels(group_ordered))
# Plot horizontal bar chart for all selected games
fps_bar <- summary_fps_long %>% ggplot(aes(x = fps , y = Application, fill = fps_type)) +
geom_text(aes(label = fps), hjust = -0.1, position = position_dodge(width = 1)) +
geom_bar(stat = "identity", position = "dodge") +
labs(
x = "FPS",
y = "Game",
fill = "",
title = "Gaming Benchmarks July 2023",
subtitle = "See spec sheet for specific computer configuration") +
scale_fill_manual(values = c("AVG FPS" = "dodgerblue2", "1% Lows" = "firebrick3", "0.1% Lows" = "darkorange1")) +
#original
#scale_fill_manual(values = c("Avg FPS" = "darkblue", "1% Low FPS" = "maroon", "0.1% Low FPS" = "yellow")) +
scale_x_continuous(breaks = seq(0, 500, by = 100),
limits = c(0, 500)) +
#Reversing the legend does work in this case, but like in the KDL study I got around this by manually defining the factor levels for each variable
guides(fill = guide_legend(reverse = TRUE)) +
theme_bw()
fps_bar
class(summary_fps_long$fps_type)
ggplot(boxplot_circ_day, aes(branch, transactions, fill = branch_size)) +
geom_boxplot(color = "black", outlier.color = "red") +
stat_summary(fun.y = "mean", geom = "point", shape = 23, size = 3, fill = "white") +
labs(title = paste0("Summary Statistics for Transactions by Day Around KDL"),
subtitle = paste0("From ", format(as.Date(start_date), "%B %d, %Y"), " to ", format(as.Date(end_date), "%B %d, %Y")),
x = NULL,
y = "Checkouts",
fill = NULL) +
#scale_y_continuous(
#breaks = seq(0, 1500, by = 250),
#limits = c(0, 1500)) +
scale_fill_manual(values = c("l_branch" = "#f0645d", "m_branch" = "#fcb813", "s_branch" = "#00b059"), ##1e196a
labels = c("l_branch" = "Large Branch", "m_branch" = "Medium Branch", "s_branch" = "Small Branch")) +
theme_clean() +
theme(panel.grid.minor.y = element_line(color = "grey", linetype = "dotted"),
axis.text.x = element_text(angle = 30, hjust = 1),
legend.position = c(0.87, 0.81),
legend.text = element_text(size = 10))
#Loading in Libraries
library(tidyverse)
library(ggthemes)
library(readxl)
library(lubridate)
library(purrr)
#Peer branches by size for EGR
#CAS GDV KWD PFD WYO
#Peer branches by size for ADA
#BYR CAL GNS LOW ROC WAL
l_branches <- c("EGR", "CAS", "GDV", "KWD", "PFD", "WYO")
m_branches <- c("ADA", "BYR", "CAL", "GNS", "LOW", "ROC", "WAL")
#Code to knit the file even if there are errors
#I like this code:
#branch <- "egr"
#Reading in the excel file based on the input from branch
#assign(paste0("oandp_", branch), read_xlsx("C:/Users/Ryan/Coding Projects/KDL Project/Quarterly Reports/KDL Data.xlsx", sheet = paste0("outreach_", branch)))
######  STILL TRYING TO SOLVE PROBLEM OF EFFICIENTLY INCORPORATING MED AND LARGE BRANCHES INTO GGPLOT GRAPHS ######
#This is the closest I could get :(
#print('colors <- list("blue3", "black", "green", "red", "purple", "orange"); l_branches <- c("EGR", "CAS", "GDV", "KWD", "PFD", "WYO"); branch_colors <- setNames(colors, l_branches); p <- ggplot(data = visitors); for (i in seq_along(l_branches)) { p <- p + geom_path(aes(x = date, y = !!sym(l_branches[i]), color = branch_colors[[i]])) + geom_point(aes(x = date, y = !!sym(l_branches[i]))) }; p; branch_colors[[1]]; l_branches[1]')
orig_circ_day <- read_xlsx("KDL Data.xlsx", sheet = "phys_circ_day")
#circ_day <- read_xlsx("C:/Users/ryan/Desktop/Quarterly Reports/KDL Data.xlsx", sheet = "phys_circ_day")
orig_circ_day$date<- as.Date(orig_circ_day$date)
#pivot to wider graph
circ_day <- pivot_wider(orig_circ_day, names_from = branch, values_from = transactions)
#Creating a synthetic month variable
#circ$date <- as.Date(paste(circ$year, circ$month, "01", sep = "-"))
#grabbing the month and year (12-18 for december 2018) of the tweet tweeted for later analysis to group by month and year
#circ$month <- format(circ$date, "%b")
#need to add a new row MIGHT NOT BE NEEDED ANYMORE
#new_row1 <- c("Monday", "2022-05-30",NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA)
#new_row2 <- c("Monday", "2022-10-03", NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA,NA)
#circ_day <- rbind(circ_day, new_row1, new_row2)
#Group circulation by week to better display that on a graph
circ_day$Week_Num <- ifelse(circ_day$day == "Monday", 1, 0)
#Sorting the dataframe by date
circ_day <- arrange(circ_day, date)
#Properly counting the week number
circ_day$week_number <- cumsum(circ_day$Week_Num)
#However before I remove missing values I need to create a data frame averaged by week
week_dates <- circ_day %>% filter(Week_Num == 1) %>% summarise(date, week_number)
#Cleaning the data to remove any rows that have a missing value, idk if I'll keep this or not
#circ_day <- as.data.frame(circ_day[complete.cases(circ_day),])
#Converting all relevant columns to numeric variables
only_nums <- circ_day %>% select(-date, -day)
only_dates <- circ_day %>% select(date, day)
only_nums <- as.data.frame(lapply(only_nums, as.numeric))
circ_day <- cbind(only_dates, only_nums)
class(circ_day$PFD)
rm(only_nums, only_dates)
#filtering the time we want to looks at (Q1 2023)
start_date <- "2023-01-01"
end_date <- "2023-5-31"
boxplot_circ_day <- orig_circ_day %>% filter(date >= as.Date(start_date, "%Y-%m-%d") & date < as.Date(end_date, "%Y-%m-%d"))
#need to filter out some branches for
boxplot_circ_day <- boxplot_circ_day %>% filter(!branch %in% c("BKM", "GFL", "MELCAT", "SC"))
#Reordering the dataset to display by descending order in the box plot
group_ordered <- with(boxplot_circ_day, reorder(branch, desc(transactions), median))
boxplot_circ_day$branch <- factor(boxplot_circ_day$branch, levels = levels(group_ordered))
# Assigning colors based on median value
boxplot_circ_day$branch_size <- ifelse(boxplot_circ_day$branch %in% l_branches, "l_branch",
ifelse(boxplot_circ_day$branch %in% m_branches, "m_branch", "s_branch"))
ggplot(boxplot_circ_day, aes(branch, transactions, fill = branch_size)) +
geom_boxplot(color = "black", outlier.color = "red") +
stat_summary(fun.y = "mean", geom = "point", shape = 23, size = 3, fill = "white") +
labs(title = paste0("Summary Statistics for Transactions by Day Around KDL"),
subtitle = paste0("From ", format(as.Date(start_date), "%B %d, %Y"), " to ", format(as.Date(end_date), "%B %d, %Y")),
x = NULL,
y = "Checkouts",
fill = NULL) +
#scale_y_continuous(
#breaks = seq(0, 1500, by = 250),
#limits = c(0, 1500)) +
scale_fill_manual(values = c("l_branch" = "#f0645d", "m_branch" = "#fcb813", "s_branch" = "#00b059"), ##1e196a
labels = c("l_branch" = "Large Branch", "m_branch" = "Medium Branch", "s_branch" = "Small Branch")) +
theme_clean() +
theme(panel.grid.minor.y = element_line(color = "grey", linetype = "dotted"),
axis.text.x = element_text(angle = 30, hjust = 1),
legend.position = c(0.87, 0.81),
legend.text = element_text(size = 10))
######### WTF is up with Byron?!?!? ######
ggplot(boxplot_circ_day, aes(branch, transactions, fill = branch_size)) +
geom_boxplot(color = "black", outlier.color = "red") +
stat_summary(fun.y = "mean", geom = "point", shape = 23, size = 1, fill = "white") + #adding the mean to the boxplots
labs(title = paste0("Summary Statistics for Transactions by Day Around KDL"),
subtitle = paste0("From ", format(as.Date(start_date), "%B %d, %Y"), " to ", format(as.Date(end_date), "%B %d, %Y")),
x = NULL,
y = "Checkouts",
fill = NULL) +
#scale_y_continuous(
#breaks = seq(0, 1500, by = 250),
#limits = c(0, 1500)) +
scale_fill_manual(values = c("l_branch" = "#f0645d", "m_branch" = "#fcb813", "s_branch" = "#00b059"), ##1e196a
labels = c("l_branch" = "Large Branch", "m_branch" = "Medium Branch", "s_branch" = "Small Branch")) +
theme_clean() +
theme(panel.grid.minor.y = element_line(color = "grey", linetype = "dotted"),
axis.text.x = element_text(angle = 30, hjust = 1),
legend.position = c(0.87, 0.81),
legend.text = element_text(size = 10))
######### WTF is up with Byron?!?!? ######
fps_bar <- summary_fps_long %>%
ggplot(aes(x = reorder(fps, ifelse(fps_type == "AVG FPS", -fps, fps)), y = Application, fill = fps_type)) +
geom_text(aes(label = fps), hjust = -0.1, position = position_dodge(width = 1)) +
geom_bar(stat = "identity", position = "dodge") +
labs(
x = "FPS",
y = "Game",
fill = "",
title = "Gaming Benchmarks July 2023",
subtitle = "See spec sheet for specific computer configuration"
) +
scale_fill_manual(values = c("AVG FPS" = "dodgerblue2", "1% Lows" = "firebrick3", "0.1% Lows" = "darkorange1")) +
scale_x_continuous(breaks = seq(0, 500, by = 100), limits = c(0, 500)) +
guides(fill = guide_legend(reverse = TRUE)) +
theme_bw()
summary_fps_long %>%
ggplot(aes(x = reorder(fps, ifelse(fps_type == "AVG FPS", -fps, fps)), y = Application, fill = fps_type)) +
geom_text(aes(label = fps), hjust = -0.1, position = position_dodge(width = 1)) +
geom_bar(stat = "identity", position = "dodge") +
labs(
x = "FPS",
y = "Game",
fill = "",
title = "Gaming Benchmarks July 2023",
subtitle = "See spec sheet for specific computer configuration"
) +
scale_fill_manual(values = c("AVG FPS" = "dodgerblue2", "1% Lows" = "firebrick3", "0.1% Lows" = "darkorange1")) +
scale_x_continuous(breaks = seq(0, 500, by = 100), limits = c(0, 500)) +
guides(fill = guide_legend(reverse = TRUE)) +
theme_bw()
summary_fps_long %>%
mutate(fps = factor(fps)) %>%
ggplot(aes(x = reorder(fps, ifelse(fps_type == "AVG FPS", -as.numeric(fps), as.numeric(fps))), y = Application, fill = fps_type)) +
geom_text(aes(label = fps), hjust = -0.1, position = position_dodge(width = 1)) +
geom_bar(stat = "identity", position = "dodge") +
labs(
x = "FPS",
y = "Game",
fill = "",
title = "Gaming Benchmarks July 2023",
subtitle = "See spec sheet for specific computer configuration"
) +
scale_fill_manual(values = c("AVG FPS" = "dodgerblue2", "1% Lows" = "firebrick3", "0.1% Lows" = "darkorange1")) +
scale_x_discrete(limits = levels(summary_fps_long$fps)) +
guides(fill = guide_legend(reverse = TRUE)) +
theme_bw()
library(tidyverse)
library(readxl)
library(lubridate) #for date extraction and manipulation
library(ggthemes)
library(tools) #for toTitleCase function (makes strings into propercase)
excel_file_hwinfo = "C:/Users/Ryan/Coding Projects/Computer Benchmark/Data/hwinfo_test.xlsx"
hwinfo_ow <- read_excel(excel_file_hwinfo, sheet = "hwinfo_ow")
hwinfo_destiny <- read_excel(excel_file_hwinfo, sheet = "hwinfo_destiny")
hwinfo_r6 <- read_excel(excel_file_hwinfo, sheet = "hwinfo_r6")
hwinfo_gtav <- read_excel(excel_file_hwinfo, sheet = "hwinfo_gtav")
hwinfo_apex <- read_excel(excel_file_hwinfo, sheet = "hwinfo_apex")
hwinfo_rl <- read_excel(excel_file_hwinfo, sheet = "hwinfo_rl")
hwinfo_battlefront <- read_excel(excel_file_hwinfo, sheet = "hwinfo_battlefront")
hwinfo_halo <- read_excel(excel_file_hwinfo, sheet = "hwinfo_halo")
hwinfo_fortnite <- read_excel(excel_file_hwinfo, sheet = "hwinfo_fortnite")
hwinfo_cod <- read_excel(excel_file_hwinfo, sheet = "hwinfo_cod")
#Creating a list of dataframes from above
df_list_hw <- list(hwinfo_ow, hwinfo_destiny, hwinfo_r6, hwinfo_gtav, hwinfo_apex, hwinfo_rl, hwinfo_battlefront, hwinfo_halo, hwinfo_fortnite, hwinfo_cod)
# Rename each data frame in the list to match its sheet name
names(df_list_hw) <- c("overwatch", "destiny", "r6", "gtav", "apex", "rocket_league", "battlefront", "halo", "fortnite", "cod")
# Remove the last 2 rows from each data frame
df_list_hw <- lapply(df_list_hw, function(df) head(df, -2))
# Convert all columns (except for the date column) to numeric then recombines original date variable to numeric dataset
df_list_hw <- lapply(df_list_hw, function(df) {
df_num <- as.data.frame(lapply(df[-1], as.numeric))
cbind(df[1], df_num)
})
# Rename the date column to "DateTime"
df_list_hw <- lapply(df_list_hw, function(df) {
names(df)[1] <- "DateTime"
df
})
# Convert the "DateTime" column to POSIXct format
df_list_hw <- lapply(df_list_hw, function(df) {
df$DateTime <- ymd_hms(df$DateTime)
df
})
# Add a "seconds" column representing seconds since the first observation
df_list_hw <- lapply(df_list_hw, function(df) {
df$seconds <- as.numeric(df$DateTime - min(df$DateTime))
df
})
excel_file_frameview = "C:/Users/Ryan/Coding Projects/Computer Benchmark/Data/frameview_files.xlsx"
Frameview_GTAV <- read_excel(excel_file_frameview, sheet = "GTA5")
Frametime_ow <- read_excel(excel_file_frameview, sheet = "Overwatch")
Frametime_R6 <- read_excel(excel_file_frameview, sheet = "RainbowSix")
Frameview_Apex <- read_excel(excel_file_frameview, sheet = "r5apex")
Frameview_Destiny <- read_excel(excel_file_frameview, sheet = "destiny2")
Frameview_RL <- read_excel(excel_file_frameview, sheet = "RocketLeague")
Frameview_battlefront <- read_excel(excel_file_frameview, sheet = "starwarsbattlefrontii")
frameview_halo <- read_excel(excel_file_frameview, sheet = "HaloInfinite")
frameview_fortnite <- read_excel(excel_file_frameview, sheet = "FortniteClient")
frameview_cod <- read_excel(excel_file_frameview, sheet = "cod")
#list of dataframes
df_list <- list(Frameview_GTAV, Frametime_ow, Frametime_R6, Frameview_Apex, Frameview_Destiny, Frameview_RL, Frameview_battlefront, frameview_halo, frameview_fortnite, frameview_cod)
names(df_list) <- c("gtav", "overwatch", "r6", "apex", "destiny", "rocket_league", "battlefront", "halo", "fortnite", "cod")
# Define the columns to select
cols_to_select <- c("TimeInSeconds", "MsBetweenPresents", "MsBetweenDisplayChange", "GPU1Clk(MHz)", "GPU1Util(%)", "GPU1Temp(C)", "AMDPwr(W) (API)", "CPUClk(MHz)", "CPUUtil(%)", "CPU Package Temp(C)", "CPU Package Power(W)")
# Apply the select statement to each data frame in the list
dfs_all <- lapply(df_list, function(df) select(df, cols_to_select))
# Add the seconds variable to each data frame in the list
dfs_all <- lapply(dfs_all, function(df) {
df$seconds <- as.numeric(df$TimeInSeconds - min(df$TimeInSeconds))
return(df)
})
#Way to thin out the observations in my dataset, although it makes no difference at large time intervals, once we zoom in on a specific time thinning out the data helps to smooth the time series graph and avoids it being so jagged
#This specific code reports values of variables 3 times a second
dfs_subset <- lapply(dfs_all, function(df) df[seq(1, nrow(df), by = 100), ])
rm(df_list)
#Data Wrangling
summary_fps <- read_excel(excel_file_frameview, sheet = "Summary")
#contains columns I might find important later but don't rn like `Min FPS`, `Max FPS`
summary_fps_o <- summary_fps %>% select(Application, `Avg FPS`, `1% Low FPS`, `0.1% Low FPS`, `Min FPS`, `Max FPS`)
summary_fps <- summary_fps %>% select(Application, `Avg FPS`, `1% Low FPS`, `0.1% Low FPS`)
#code to strip the .exe from the application variable so that it just displays the game name
pattern <- "\\.exe$"
summary_fps$Application <- str_replace(summary_fps$Application, pattern, "")
#Code to calculate averages of "Avg FPS", "1% Low FPS", and "0.1% Low FPS" across game observations (the goal is 3 observations per game then take the averages of that)
summary_fps <- summary_fps %>% group_by(Application) %>%
summarise('AVG FPS' = mean(`Avg FPS`),
'1% Lows' = mean(`1% Low FPS`),
'0.1% Lows' = mean(`0.1% Low FPS`))
#Pivoting the data to a longer format so that each of my FPS measures has their own column
summary_fps_long <- pivot_longer(summary_fps, cols = c("AVG FPS", "1% Lows", "0.1% Lows"), names_to = "fps_type", values_to = "fps")
#Changing the names of the games in the application column to better fit
summary_fps_long <- summary_fps_long %>%
mutate(Application = recode(Application,
"FortniteClient-Win64-Shipping" = "Fortnite",
"starwarsbattlefrontii" = "SW Battlefront II",
"r5apex" = "Apex",
"cod" = "COD: Warzone",
"destiny2" = "Destiny 2"))
#Original
#hehe <- pivot_longer(summary_fps, cols = c("Avg FPS", "1% Low FPS", "0.1% Low FPS"), names_to = "fps_type", values_to = "fps")
#changing the format of the newly created FPS column so that it only displays out to 1 decimal point string to display all numbers
summary_fps_long$fps <- round(summary_fps_long$fps, digits = 1)
############# NOT AS EASY TO REODER A GROUPED BAR CHART AS IT IS A BOXPLOT #############
#Reordering the dataset to display by descending order in the box plot
#group_ordered <- with(summary_fps_long, reorder(fps, desc('AVG FPS'), mean))
#boxplot_circ_day$branch <- factor(boxplot_circ_day$branch, levels = levels(group_ordered))
# Plot horizontal bar chart for all selected games
fps_bar <- summary_fps_long %>% ggplot(aes(x = fps , y = Application, fill = fps_type)) +
geom_text(aes(label = fps), hjust = -0.1, position = position_dodge(width = 1)) +
geom_bar(stat = "identity", position = "dodge") +
labs(
x = "FPS",
y = "Game",
fill = "",
title = "Gaming Benchmarks July 2023",
subtitle = "See spec sheet for specific computer configuration") +
scale_fill_manual(values = c("AVG FPS" = "dodgerblue2", "1% Lows" = "firebrick3", "0.1% Lows" = "darkorange1")) +
#original
#scale_fill_manual(values = c("Avg FPS" = "darkblue", "1% Low FPS" = "maroon", "0.1% Low FPS" = "yellow")) +
scale_x_continuous(breaks = seq(0, 500, by = 100),
limits = c(0, 500)) +
#Reversing the legend does work in this case, but like in the KDL study I got around this by manually defining the factor levels for each variable
guides(fill = guide_legend(reverse = TRUE)) +
theme_bw()
fps_bar
